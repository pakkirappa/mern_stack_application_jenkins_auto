pipeline {
  agent any

  environment {
    SONARQUBE = 'SonarQube'  
    SCANNER_HOME = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    NODEJS = 'NodeJS16'   // make sure you configure NodeJS in Jenkins Global Tools
    SONARQUBE_TOKEN = credentials('sqa_dbd458f5324ccb6ca10d41ffd5c80a514e9132bf')  
    DOCKER_REGISTRY = 'your-dockerhub-username' // optional, if pushing images
    SONAR_HOST_URL = 'http://localhost:9000' // replace with your SonarQube server URL
  }

  tools {
    nodejs "${NODEJS}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Install Dependencies') {
      parallel {
        stage('Backend deps') {
          steps {
            dir('backend') {
              sh 'npm install'
            }
          }
        }
        stage('Frontend deps') {
          steps {
            dir('frontend') {
              sh 'npm install'
            }
          }
        }
      }
    }

    stage('Lint') {
      parallel {
        stage('Backend lint') {
          steps {
            dir('backend') {
              sh 'npm run lint || echo "No lint script in backend"'
            }
          }
        }
        stage('Frontend lint') {
          steps {
            dir('frontend') {
              sh 'npm run lint || echo "No lint script in frontend"'
            }
          }
        }
      }
    }

    stage('Run Tests') {
      parallel {
        stage('Backend Tests') {
          steps {
            dir('backend') {
              sh 'npm test || echo "No backend tests configured"'
            }
          }
        }
        stage('Frontend Tests') {
          steps {
            dir('frontend') {
              sh 'npm test || echo "No frontend tests configured"'
            }
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv("${SONARQUBE}") {
          sh """
            ${SCANNER_HOME}/bin/sonar-scanner \
              -Dsonar.projectKey=mern_app_auto \
              -Dsonar.sources=backend,frontend \
              -Dsonar.host.url=${SONAR_HOST_URL} \
              -Dsonar.login=${SONARQUBE_TOKEN}
          """
        }
      }
    }

    stage('Build') {
      parallel {
        stage('Build Frontend') {
          steps {
            dir('frontend') {
              sh 'npm run build'
            }
          }
        }
        stage('Prepare Backend') {
          steps {
            dir('backend') {
              sh 'npm run build || echo "No backend build step"'
            }
          }
        }
      }
    }

    stage('Docker Build & Push') {
      when {
        expression { return env.DOCKER_REGISTRY != null }
      }
      steps {
        script {
          sh """
            docker build -t ${DOCKER_REGISTRY}/mern-backend:latest ./backend
            docker build -t ${DOCKER_REGISTRY}/mern-frontend:latest ./frontend
            docker push ${DOCKER_REGISTRY}/mern-backend:latest
            docker push ${DOCKER_REGISTRY}/mern-frontend:latest
          """
        }
      }
    }
  }

  post {
    always {
      echo "Cleaning up..."
    }
    failure {
      echo "Build failed!"
    }
    success {
      echo "Build succeeded!"
    }
  }
}
